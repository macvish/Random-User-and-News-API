{"version":3,"sources":["components/Home.js","components/SkeletonScreen.js","components/randomUsers.js","components/newsTitles.js","router/webRouter.js","App.js","serviceWorker.js","index.js"],"names":["home","skeletonScreen","class","randomUsers","props","state","user","loading","_user","bind","this","setState","axios","then","res","data","results","setInterval","console","log","catch","err","getUsers","map","key","id","value","name","title","first","last","email","cell","className","Component","InputGroup","Group","App","useState","news","setNews","searchQuery","setSearchQuery","url","setUrl","useEffect","fetch","result","json","hits","onSubmit","e","preventDefault","compact","Item","placeholder","style","width","onChange","target","type","htmlType","n","i","href","switchRoute","exact","path","component","Home","NewsTitles","RandomUsers","Header","Content","Footer","theme","mode","defaultSelectedKeys","lineHeight","to","padding","margin","background","minHeight","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00a59586.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst home = () => {\r\n    return (\r\n        <div>\r\n        <p>Home</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default home","import React from 'react'\r\n\r\nimport '../style/SkeletonScreen.sass'\r\n\r\nconst skeletonScreen = () => {\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"post\">\r\n                <div class=\"avatar\"></div>\r\n                <div class=\"line\"></div>\r\n                <div class=\"line\"></div>\r\n            </div>\r\n\r\n            <div class=\"post\">\r\n                <div class=\"avatar\"></div>\r\n                <div class=\"line\"></div>\r\n                <div class=\"line\"></div>\r\n            </div>\r\n\r\n            <div class=\"post\">\r\n                <div class=\"avatar\"></div>\r\n                <div class=\"line\"></div>\r\n                <div class=\"line\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default skeletonScreen","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport SkeletonScreen from './SkeletonScreen'\r\n\r\nclass randomUsers extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            user: [],\r\n            loading: false\r\n        }\r\n        this._user = this._user.bind(this)\r\n    }\r\n    \r\n    getUsers(){\r\n      this.setState({loading: true})\r\n      axios('https://api.randomuser.me/?nat=US&results=5')\r\n        .then(res => {this.setState({\r\n            user: res.data.results\r\n        })\r\n        setInterval(() => {\r\n          this.setState(this.setState({loading: false}))\r\n        }, 5000);\r\n        console.log(this.state.user)\r\n      })\r\n        .catch(err => console.log(err))\r\n    }\r\n    \r\n    componentWillMount(){\r\n      this.getUsers()\r\n    }\r\n\r\n    _user(){\r\n      return(\r\n        this.state.user.map(user => \r\n            <div key={user.id.value}>\r\n              <h3>\r\n                {`${user.name.title}. ${user.name.first} ${user.name.last}`}\r\n              </h3>\r\n              <p>{user.email}</p>\r\n              <p>{user.cell}</p>\r\n              <hr/>\r\n            </div>\r\n          )\r\n      )\r\n    }\r\n    \r\n      render()\r\n      {\r\n        let {loading} = this.state\r\n        return (\r\n        <div className=\"App\">\r\n          {!loading ? this.state.user.map(user => \r\n            <div key={user.id.value}>\r\n              <h3>\r\n                {`${user.name.title}. ${user.name.first} ${user.name.last}`}\r\n              </h3>\r\n              <p>{user.email}</p>\r\n              <p>{user.cell}</p>\r\n              <hr/>\r\n            </div>) : <SkeletonScreen />}\r\n          \r\n        </div>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nexport default randomUsers","import React, { useEffect, useState } from 'react'\r\nimport { Form, Input, Button } from 'antd'\r\n\r\nconst InputGroup = Input.Group\r\n\r\nfunction App() {\r\n  const [news, setNews] = useState([])\r\n  const [searchQuery, setSearchQuery] = useState('react')\r\n  const [url, setUrl] = useState('https://hn.algolia.com/api/v1/search?query=react')\r\n\r\n  const fetchNews = () => {\r\n    fetch(url)\r\n    .then(result => result.json())\r\n    .then(data => {\r\n      setNews(data.hits)\r\n      console.log(data)\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchNews()\r\n  }, [url])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    setUrl(`https://hn.algolia.com/api/v1/search?query=${searchQuery}`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>News</h2>\r\n      <Form onSubmit={handleSubmit}>\r\n        <InputGroup compact>\r\n          <Form.Item>\r\n            <Input \r\n              placeholder='search' \r\n              value={searchQuery} \r\n              style={{width: '95%'}}\r\n              onChange={e => setSearchQuery(e.target.value)}/>\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button type='primary' htmlType='submit'>Search</Button>\r\n          </Form.Item>\r\n        </InputGroup>\r\n      </Form>\r\n      {news.map((n, i) => (<p key={i}><a href={n.url} target='blank'>{n.title}</a></p>))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport Home from '../components/Home'\r\nimport RandomUsers from '../components/randomUsers'\r\nimport NewsTitles from '../components/newsTitles'\r\n\r\nconst switchRoute = () => {\r\n    return(\r\n    <Switch>\r\n        <Route exact path='/' component={Home}/>\r\n        <Route path='/news' component={NewsTitles}/>\r\n        <Route path='/users' component={RandomUsers} />\r\n\r\n    </Switch>\r\n    )\r\n}\r\n\r\nexport default switchRoute","import React, { Component } from 'react'\nimport { Layout, Menu, Breadcrumb } from 'antd'\nimport { Link } from 'react-router-dom'\n\nimport SwitchRoute from './router/webRouter'\nimport './style/App.css'\n\nconst { Header, Content, Footer } = Layout\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n        user: []\n    }\n}\n\n\n  render()\n  {\n    return (\n      <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          defaultSelectedKeys={['1']}\n          style={{ lineHeight: '64px' }}\n        >\n          <Menu.Item key=\"1\"><Link to={'/'}>Home</Link></Menu.Item>\n          <Menu.Item key=\"2\"><Link to={'/users'}>Users</Link></Menu.Item>\n          <Menu.Item key=\"3\"><Link to={'/news'}>News</Link></Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n        </Breadcrumb>\n        <div style={{ background: '#fff', padding: 24, minHeight: 280 }}><SwitchRoute /></div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>©2018 Created by Macanthony</Footer>\n    </Layout>\n  )\n}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './style/index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}